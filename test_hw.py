'''





Do NOT edit this file unless told to do so by your instructor.









'''
#TODO Find a more scalable approach

import random

import string
import statistics
import sys
import pathlib

import test_utils
sys.meta_path.append(test_utils.NotebookFinder())
loaded = test_utils.NotebookLoader("./unit_1_numpy_hw.ipynb")
loaded.load_module("unit_1_numpy_hw")

import unit_1_numpy_hw
import numpy as np

# These are the tests that are visible to you, this will help you debug your own problems

def test_list_to_np_array():
    # This has been tested
    list1 = [3, 4, 5, 6, 7, 8]
    list2 = [19.02, 819.2, -43.2, 90.78]
    list3 = [0, 0, 0, 0]
    lists = [list1, list2, list3]
    np1 = unit_1_numpy_hw.list_to_np_array(list1)
    np2 = unit_1_numpy_hw.list_to_np_array(list2)
    np3 = unit_1_numpy_hw.list_to_np_array(list3)
    arrays = [np1, np2, np3]
    for i, np_array in enumerate(arrays):
        assert type(np_array) == np.ndarray, "Are you making a numpy array?"
        assert len(np_array) != 0, "Your array is empty"
        for j, value in enumerate(np_array):
            assert lists[i][j] == value, "Value in array did not match value in list"

def test_np_array_of_ones():
    #This has been tested
    shapes = [10], [1, 19, 20], [2, 3, 8, 9, 12]
    for l in shapes:
        np_array = unit_1_numpy_hw.np_array_of_ones(l)
        assert type(np_array) == np.ndarray, "Are you making a numpy array?"
        assert len(np_array) != 0, "Your array is empty"
        # I dont really care if the student uses ones here
        assert list(np_array.shape) == l

def test_get_np_array_shape():
    # This has been tested
    shapes = [(3, 6, 7), (5, 6, 7), (random.randint(1, 99), random.randint(1, 99), random.randint(1, 99))]
    for t in shapes:
        np_array = np.empty(t)
        out_shape = unit_1_numpy_hw.get_np_array_shape(np_array)
        assert t == out_shape

def test_create_multi_dimensional_arrays():
    # Tested
    list_of_arrays = unit_1_numpy_hw.create_multi_dimensional_arrays()
    assert len(list_of_arrays) == 3, "Are you missing an array?"
    for np_array in list_of_arrays:
        assert type(np_array) == np.ndarray, "Are you making a numpy array?"
        assert len(np_array) != 0, "Your array is has zero length"
    
    assert list_of_arrays[0].shape == (2, 3, 8, 9)
    assert list_of_arrays[1].shape == (4, 2)
    assert list_of_arrays[2].shape == (6, 6)

def test_add_to_array():
    # Tested, maybe there is an improvement I can make to 
    # fail on looping. 
    arrays = (np.array([random.randrange(-999, 999), random.randrange(-999, 999), random.randrange(-999, 999)]), np.array([random.randrange(-999, 999), random.randrange(-999, 999), random.randrange(-999, 999)]))    
    x = random.randrange(-999, 999)
    for array in arrays:
        np_array = unit_1_numpy_hw.add_to_array(array, x)
        assert type(np_array) == np.ndarray, "Are you making a numpy array?"
        assert len(np_array) != 0, "Your array is has zero length"
        for i, value in enumerate(np_array):
            assert value == array[i] + x, "Did not add correctly"

def test_subtract_from_array():
    # Tested, maybe there is an improvement I can make to 
    # fail on looping. 
    arrays = (np.array([random.randrange(-999, 999), random.randrange(-999, 999), random.randrange(-999, 999)]), np.array([random.randrange(-999, 999), random.randrange(-999, 999), random.randrange(-999, 999)]))
    x = random.randrange(-999, 999)
    for array in arrays:
        np_array = unit_1_numpy_hw.subtract_from_array(array, x)
        assert type(np_array) == np.ndarray, "Are you making a numpy array?"
        assert len(np_array) != 0, "Your array is has zero length"
        for i, value in enumerate(np_array):
            assert value == array[i] - x, "Did not subtract correctly"


def test_scale_array():
    # Tested, maybe there is an improvement I can make to 
    # fail on looping. 
    arrays = (np.array([10, 1, -99]), np.array([1, -14, 10]), np.array([20, 40, 21]))
    x = random.randrange(-999, 999)
    for array in arrays:
        np_array = unit_1_numpy_hw.scale_array(array, x)
        assert type(np_array) == np.ndarray, "Are you making a numpy array?"
        assert len(np_array) != 0, "Your array is has zero length"
        for i, value in enumerate(np_array):
            assert value == array[i] * x, "Did not subtract correctly"


def test_grab_element_1dim():
    # Tested
    x = random.randint(-999, 999)
    nums = [5, x]
    arrays = [np.array([3, 4, nums[0], 6]), np.array([0, 1, nums[1], 50 ])]
    for i, array in enumerate(arrays):
        assert unit_1_numpy_hw.grab_element_1dim(array) == nums[i], "Did you grab the right index?"

def test_grab_element_2dim():
    # Tested
    x = random.randint(-999, 999)
    nums = [10, x]
    list_1 = [
        [1, 2, 3, 4, 7, 9, 10],
        [5, 1, 5, 1, 3, 5, 1],
        [4, 5, 1, 4, nums[0], 1, 0],
    ]
    list_2 = [
        [10, 111, 2, 13, 1, 23, 14],
        [19, 1, 3, 3, 0, -2, 12],
        [-3, 2, 1, 14, nums[1], 903, 12],
        [19, 13, 90, 10, 8, 2, 16],
        [11, 123, 2, 12, -56, 2, 14],
    ]
    arrays = [np.array(list_1), np.array(list_2)]
    for i, array in enumerate(arrays):
        assert unit_1_numpy_hw.grab_element_2dim(array) == nums[i]

def test_slice_row():
    #Tested
    rand_array = np.random.rand(15, 20)
    for i in range(0, 3):
        for j, value in enumerate(rand_array[0]):
            assert value == unit_1_numpy_hw.slice_row(rand_array)[0][j]


    
    

